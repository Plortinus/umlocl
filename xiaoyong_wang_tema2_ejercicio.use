model SistemaComercioElectronico

enum TipoDescuento {
    porcentaje,
    regalo_unidad
}

class Usuario
    attributes
        nick : String
        clave : String
end

class Producto
    attributes
        tipo : String  -- "Libros", "Discos", "Muebles"
        impuesto : Real
        nombre : String -- "Moby Dick", "Transformer", "Mesa Sklum"
        precio : Real
        stock : Integer
end

class Descuento
    attributes
        tipo : TipoDescuento
        valor : Real  -- porcentaje (0-100) o unidades de regalo
end

class Carrito
    attributes
        fechaCompra : String
end

class OrdenCompra
    attributes
        cantidad : Integer
end

-- ============ ASOCIACIONES ============

association UsuarioCarrito between
    Usuario[1] role usuario
    Carrito[*] role carritos
end

association CarritoOrden between
    Carrito[1] role carrito
    OrdenCompra[1..*] role ordenes
end

association OrdenProducto between
    OrdenCompra[*] role ordenes
    Producto[1] role producto
end

association ProductoDescuento between
    Producto[*] role productos
    Descuento[0..1] role descuento
end

-- ============ RESTRICCIONES OCL ============

constraints

--- 1. En cada orden de compra, las unidades pedidas no pueden ser negativas ---
context OrdenCompra
    inv unidadesNoNegativas: self.cantidad >= 0

--- 2. Las unidades en stock de cada producto no pueden ser negativas ---
context Producto
    inv stockNoNegativo: self.stock >= 0

--- 3. El precio de un producto debe ser positivo ---
context Producto
    inv precioPositivo: self.precio > 0

--- 4. El porcentaje de impuestos de un tipo de producto no puede ser negativo ---
context Producto
    inv impuestoNoNegativo: self.impuesto >= 0

--- 5. El porcentaje de descuento debe estar comprendido entre 0 y 100 (ambos excluidos) ---
context Descuento
    inv descuentoValido: 
        self.tipo = TipoDescuento::porcentaje implies (self.valor > 0 and self.valor < 100)

--- 6. En todo momento, en el sistema debe existir al menos un producto con descuento ---
context Producto
    inv alMenosUnDescuento: 
        Producto.allInstances()->exists(p | p.descuento.isDefined())

--- 7. Si un producto tiene un descuento, entonces su tipo de producto no puede tener el mismo tipo de descuento ---
context Producto
    inv tipoSinDescuentoDuplicado: 
        self.descuento.isDefined() implies
        Producto.allInstances()->select(p | p.tipo = self.tipo and p <> self)
            ->forAll(p | p.descuento.oclIsUndefined() or p.descuento.tipo <> self.descuento.tipo)

--- 8. El nÃºmero de unidades pedidas de cada producto no puede superar el stock disponible ---
context Producto
    inv unidadesPedidosNoSuperanStock: 
        self.stock >= self.ordenes->collect(cantidad)->sum()